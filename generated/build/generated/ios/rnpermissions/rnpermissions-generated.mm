/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "rnpermissions.h"


namespace facebook {
  namespace react {
    
    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_checkNotifications(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkNotifications", @selector(checkNotifications:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_openSettings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "openSettings", @selector(openSettings:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_checkMultiplePermissions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkMultiplePermissions", @selector(checkMultiplePermissions:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_checkPermission(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkPermission", @selector(checkPermission:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_requestMultiplePermissions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestMultiplePermissions", @selector(requestMultiplePermissions:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_requestPermission(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestPermission", @selector(requestPermission:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_shouldShowRequestPermissionRationale(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "shouldShowRequestPermissionRationale", @selector(shouldShowRequestPermissionRationale:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_check(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "check", @selector(check:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_checkLocationAccuracy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkLocationAccuracy", @selector(checkLocationAccuracy:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_openLimitedPhotoLibraryPicker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "openLimitedPhotoLibraryPicker", @selector(openLimitedPhotoLibraryPicker:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_request(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "request", @selector(request:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_requestLocationAccuracy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestLocationAccuracy", @selector(requestLocationAccuracy:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_requestNotifications(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestNotifications", @selector(requestNotifications:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePermissionsModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getConstants", @selector(getConstants), args, count);
    }

    NativePermissionsModuleSpecJSI::NativePermissionsModuleSpecJSI(const ObjCTurboModule::InitParams &params)
      : ObjCTurboModule(params) {
        
        methodMap_["checkNotifications"] = MethodMetadata {0, __hostFunction_NativePermissionsModuleSpecJSI_checkNotifications};
        
        
        methodMap_["openSettings"] = MethodMetadata {0, __hostFunction_NativePermissionsModuleSpecJSI_openSettings};
        
        
        methodMap_["checkMultiplePermissions"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_checkMultiplePermissions};
        
        
        methodMap_["checkPermission"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_checkPermission};
        
        
        methodMap_["requestMultiplePermissions"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_requestMultiplePermissions};
        
        
        methodMap_["requestPermission"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_requestPermission};
        
        
        methodMap_["shouldShowRequestPermissionRationale"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_shouldShowRequestPermissionRationale};
        
        
        methodMap_["check"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_check};
        
        
        methodMap_["checkLocationAccuracy"] = MethodMetadata {0, __hostFunction_NativePermissionsModuleSpecJSI_checkLocationAccuracy};
        
        
        methodMap_["openLimitedPhotoLibraryPicker"] = MethodMetadata {0, __hostFunction_NativePermissionsModuleSpecJSI_openLimitedPhotoLibraryPicker};
        
        
        methodMap_["request"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_request};
        
        
        methodMap_["requestLocationAccuracy"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_requestLocationAccuracy};
        
        
        methodMap_["requestNotifications"] = MethodMetadata {1, __hostFunction_NativePermissionsModuleSpecJSI_requestNotifications};
        
        
        methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativePermissionsModuleSpecJSI_getConstants};
        
    }
  } // namespace react
} // namespace facebook
