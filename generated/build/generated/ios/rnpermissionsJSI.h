/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  #pragma mark - RNPermissionsModuleBaseNotificationsResponse

template <typename P0, typename P1>
struct RNPermissionsModuleBaseNotificationsResponse {
  P0 status;
  P1 settings;
  bool operator==(const RNPermissionsModuleBaseNotificationsResponse &other) const {
    return status == other.status && settings == other.settings;
  }
};

template <typename P0, typename P1>
struct RNPermissionsModuleBaseNotificationsResponseBridging {
  static RNPermissionsModuleBaseNotificationsResponse<P0, P1> fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    RNPermissionsModuleBaseNotificationsResponse<P0, P1> result{
      bridging::fromJs<P0>(rt, value.getProperty(rt, "status"), jsInvoker),
      bridging::fromJs<P1>(rt, value.getProperty(rt, "settings"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Object statusToJs(jsi::Runtime &rt, P0 value) {
    return bridging::toJs(rt, value);
  }
  static jsi::Object settingsToJs(jsi::Runtime &rt, P1 value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
    jsi::Runtime &rt,
    const RNPermissionsModuleBaseNotificationsResponse<P0, P1> &value,
    const std::shared_ptr<CallInvoker> &jsInvoker) {
      auto result = facebook::jsi::Object(rt);
          result.setProperty(rt, "status", bridging::toJs(rt, value.status, jsInvoker));
    result.setProperty(rt, "settings", bridging::toJs(rt, value.settings, jsInvoker));
          return result;
        }
      };

class JSI_EXPORT NativePermissionsModuleCxxSpecJSI : public TurboModule {
protected:
  NativePermissionsModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value checkNotifications(jsi::Runtime &rt) = 0;
  virtual jsi::Value openSettings(jsi::Runtime &rt) = 0;
  virtual jsi::Value checkMultiplePermissions(jsi::Runtime &rt, jsi::Array permissions) = 0;
  virtual jsi::Value checkPermission(jsi::Runtime &rt, jsi::String permission) = 0;
  virtual jsi::Value requestMultiplePermissions(jsi::Runtime &rt, jsi::Array permissions) = 0;
  virtual jsi::Value requestPermission(jsi::Runtime &rt, jsi::String permission) = 0;
  virtual jsi::Value shouldShowRequestPermissionRationale(jsi::Runtime &rt, jsi::String permission) = 0;
  virtual jsi::Value check(jsi::Runtime &rt, jsi::String permission) = 0;
  virtual jsi::Value checkLocationAccuracy(jsi::Runtime &rt) = 0;
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Value openLimitedPhotoLibraryPicker(jsi::Runtime &rt) = 0;
  virtual jsi::Value request(jsi::Runtime &rt, jsi::String permission) = 0;
  virtual jsi::Value requestLocationAccuracy(jsi::Runtime &rt, jsi::String purposeKey) = 0;
  virtual jsi::Value requestNotifications(jsi::Runtime &rt, jsi::Array options) = 0;

};

template <typename T>
class JSI_EXPORT NativePermissionsModuleCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativePermissionsModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("RNPermissionsModule", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativePermissionsModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativePermissionsModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Value checkNotifications(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::checkNotifications) == 1,
          "Expected checkNotifications(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkNotifications, jsInvoker_, instance_);
    }
    jsi::Value openSettings(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::openSettings) == 1,
          "Expected openSettings(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openSettings, jsInvoker_, instance_);
    }
    jsi::Value checkMultiplePermissions(jsi::Runtime &rt, jsi::Array permissions) override {
      static_assert(
          bridging::getParameterCount(&T::checkMultiplePermissions) == 2,
          "Expected checkMultiplePermissions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkMultiplePermissions, jsInvoker_, instance_, std::move(permissions));
    }
    jsi::Value checkPermission(jsi::Runtime &rt, jsi::String permission) override {
      static_assert(
          bridging::getParameterCount(&T::checkPermission) == 2,
          "Expected checkPermission(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkPermission, jsInvoker_, instance_, std::move(permission));
    }
    jsi::Value requestMultiplePermissions(jsi::Runtime &rt, jsi::Array permissions) override {
      static_assert(
          bridging::getParameterCount(&T::requestMultiplePermissions) == 2,
          "Expected requestMultiplePermissions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestMultiplePermissions, jsInvoker_, instance_, std::move(permissions));
    }
    jsi::Value requestPermission(jsi::Runtime &rt, jsi::String permission) override {
      static_assert(
          bridging::getParameterCount(&T::requestPermission) == 2,
          "Expected requestPermission(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestPermission, jsInvoker_, instance_, std::move(permission));
    }
    jsi::Value shouldShowRequestPermissionRationale(jsi::Runtime &rt, jsi::String permission) override {
      static_assert(
          bridging::getParameterCount(&T::shouldShowRequestPermissionRationale) == 2,
          "Expected shouldShowRequestPermissionRationale(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::shouldShowRequestPermissionRationale, jsInvoker_, instance_, std::move(permission));
    }
    jsi::Value check(jsi::Runtime &rt, jsi::String permission) override {
      static_assert(
          bridging::getParameterCount(&T::check) == 2,
          "Expected check(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::check, jsInvoker_, instance_, std::move(permission));
    }
    jsi::Value checkLocationAccuracy(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::checkLocationAccuracy) == 1,
          "Expected checkLocationAccuracy(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkLocationAccuracy, jsInvoker_, instance_);
    }
    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Value openLimitedPhotoLibraryPicker(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::openLimitedPhotoLibraryPicker) == 1,
          "Expected openLimitedPhotoLibraryPicker(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openLimitedPhotoLibraryPicker, jsInvoker_, instance_);
    }
    jsi::Value request(jsi::Runtime &rt, jsi::String permission) override {
      static_assert(
          bridging::getParameterCount(&T::request) == 2,
          "Expected request(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::request, jsInvoker_, instance_, std::move(permission));
    }
    jsi::Value requestLocationAccuracy(jsi::Runtime &rt, jsi::String purposeKey) override {
      static_assert(
          bridging::getParameterCount(&T::requestLocationAccuracy) == 2,
          "Expected requestLocationAccuracy(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestLocationAccuracy, jsInvoker_, instance_, std::move(purposeKey));
    }
    jsi::Value requestNotifications(jsi::Runtime &rt, jsi::Array options) override {
      static_assert(
          bridging::getParameterCount(&T::requestNotifications) == 2,
          "Expected requestNotifications(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestNotifications, jsInvoker_, instance_, std::move(options));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
